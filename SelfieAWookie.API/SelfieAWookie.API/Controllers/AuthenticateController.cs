using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using SelfieAWookie.API.Application.DTO;
using SelfieAWookie.Core.Selfies.Infrastructures.Configurations;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace SelfieAWookie.API.Controllers
{
    [Route("api/v1/[controller]")]
    [ApiController]
    public class AuthenticateController : ControllerBase
    {
        private readonly UserManager<IdentityUser> _UserManager = null;
        private readonly IConfiguration _Configuration = null;
        private readonly OptionSecurite _OptionSecurite = null;
        private readonly ILogger<AuthenticateController> _Log = null;

        public AuthenticateController(ILogger<AuthenticateController> log, UserManager<IdentityUser> userManager, IConfiguration configuration, IOptions<OptionSecurite> options)
        {
            _UserManager = userManager;
            _Configuration = configuration;
            _OptionSecurite = options.Value;
            _Log = log;

            _Log.LogWarning("Test log");
        }

        [HttpPost]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        public async Task<IActionResult> Login([FromBody] AuthUserDTO utilisateurLogin)
        {
            IActionResult result = this.BadRequest();

            var user = await _UserManager.FindByNameAsync(utilisateurLogin.UserName);
            if (user != null)
            {
                var verif = await _UserManager.CheckPasswordAsync(user, utilisateurLogin.Password);
                if (verif)
                {
                    result = this.Ok(new AuthUserDTO()
                    {
                        Login = user.Email,
                        Email = user.Email,
                        UserName = user.UserName,
                        Token = GenerateJwtToken(user)
                    });
                }
                else
                {
                    result = this.Unauthorized();
                }
            }

            return result;
        }

        [Route("Register")]
        [HttpPost]
        public async Task<IActionResult> Register([FromBody] AuthUserDTO utilisateurLogin)
        {
            IActionResult result = this.BadRequest();

            var user = new IdentityUser(utilisateurLogin.Login);
            user.Email = utilisateurLogin.Email;
            user.UserName = utilisateurLogin.UserName;
            var success = await _UserManager.CreateAsync(user,utilisateurLogin.Password);
            if(success.Succeeded)
            {
                result = this.Ok(new AuthUserDTO()
                {
                    Login = user.Email,
                    Email = user.Email,
                    UserName = user.UserName,
                    Token = GenerateJwtToken(user)
                });
            }

            return result;
        }

        private string GenerateJwtToken(IdentityUser user)
        {
            // Now its ime to define the jwt token which will be responsible of creating our tokens
            var jwtTokenHandler = new JwtSecurityTokenHandler();

            // We get our secret from the appsettings
            var key = Encoding.UTF8.GetBytes(_OptionSecurite.Key);

            // we define our token descriptor
            // We need to utilise claims which are properties in our token which gives information about the token
            // which belong to the specific user who it belongs to
            // so it could contain their id, name, email the good part is that these information
            // are generated by our server and identity framework which is valid and trusted
            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(new[]
                {
                new Claim("Id", user.Id),
                new Claim(JwtRegisteredClaimNames.Sub, user.Email),
                new Claim(JwtRegisteredClaimNames.Email, user.Email),
                // the JTI is used for our refresh token which we will be convering in the next video
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
            }),
                // the life span of the token needs to be shorter and utilise refresh token to keep the user signedin
                // but since this is a demo app we can extend it to fit our current need
                Expires = DateTime.UtcNow.AddHours(6),
                // here we are adding the encryption alogorithim information which will be used to decrypt our token
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
            };

            var token = jwtTokenHandler.CreateToken(tokenDescriptor);

            var jwtToken = jwtTokenHandler.WriteToken(token);

            return jwtToken;
        }
    }
}
